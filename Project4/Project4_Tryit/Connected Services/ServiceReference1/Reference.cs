//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project3_Tryit.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindClosestStore", ReplyAction="http://tempuri.org/IService1/FindClosestStoreResponse")]
        string FindClosestStore(string zipCode, string storeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindClosestStore", ReplyAction="http://tempuri.org/IService1/FindClosestStoreResponse")]
        System.Threading.Tasks.Task<string> FindClosestStoreAsync(string zipCode, string storeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindClosestGyms", ReplyAction="http://tempuri.org/IService1/FindClosestGymsResponse")]
        string FindClosestGyms(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindClosestGyms", ReplyAction="http://tempuri.org/IService1/FindClosestGymsResponse")]
        System.Threading.Tasks.Task<string> FindClosestGymsAsync(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStockOpen", ReplyAction="http://tempuri.org/IService1/GetStockOpenResponse")]
        string GetStockOpen(string symbol, int year, int month, int day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStockOpen", ReplyAction="http://tempuri.org/IService1/GetStockOpenResponse")]
        System.Threading.Tasks.Task<string> GetStockOpenAsync(string symbol, int year, int month, int day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindRecipes", ReplyAction="http://tempuri.org/IService1/FindRecipesResponse")]
        string FindRecipes(string ingredients);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindRecipes", ReplyAction="http://tempuri.org/IService1/FindRecipesResponse")]
        System.Threading.Tasks.Task<string> FindRecipesAsync(string ingredients);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Project3_Tryit.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Project3_Tryit.ServiceReference1.IService1>, Project3_Tryit.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string FindClosestStore(string zipCode, string storeName) {
            return base.Channel.FindClosestStore(zipCode, storeName);
        }
        
        public System.Threading.Tasks.Task<string> FindClosestStoreAsync(string zipCode, string storeName) {
            return base.Channel.FindClosestStoreAsync(zipCode, storeName);
        }
        
        public string FindClosestGyms(string zipCode) {
            return base.Channel.FindClosestGyms(zipCode);
        }
        
        public System.Threading.Tasks.Task<string> FindClosestGymsAsync(string zipCode) {
            return base.Channel.FindClosestGymsAsync(zipCode);
        }
        
        public string GetStockOpen(string symbol, int year, int month, int day) {
            return base.Channel.GetStockOpen(symbol, year, month, day);
        }
        
        public System.Threading.Tasks.Task<string> GetStockOpenAsync(string symbol, int year, int month, int day) {
            return base.Channel.GetStockOpenAsync(symbol, year, month, day);
        }
        
        public string FindRecipes(string ingredients) {
            return base.Channel.FindRecipes(ingredients);
        }
        
        public System.Threading.Tasks.Task<string> FindRecipesAsync(string ingredients) {
            return base.Channel.FindRecipesAsync(ingredients);
        }
    }
}
